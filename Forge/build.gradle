buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://plugins.gradle.org/m2/' }
		maven {
			name = 'ParchmentMC'
			url = 'https://maven.parchmentmc.org/'
		}
		maven {
			name = 'Sponge / Mixin'
			url = 'https://repo.spongepowered.org/repository/maven-public/'
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'net.darkhax.curseforgegradle', name: 'CurseForgeGradle', version: '1.+'
        classpath 'se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.8'
	}
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'net.darkhax.curseforgegradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

archivesBaseName = "${mod_id}"
version = "${minecraft_version}-${mod_version}-FORGE"

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"

	config "${mod_id}.mixins.json"
	config "${mod_id}_forge.mixins.json"
}

repositories {
	maven {
		name = "C4's Maven"
		url = "https://maven.theillusivec4.top/"
	}
}

minecraft {
	mappings channel: "${mappings_channel}", version: "${mappings_version}-${minecraft_version}"

	if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
		// This location is hardcoded in Forge and can not be changed.
		// https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
		accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
		project.logger.debug('Forge Access Transformers are enabled for this project.')
	}

	runs {
		client {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			args "-mixin.config=${mod_id}.mixins.json"
			mods {
				modClientRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			args "-mixin.config=${mod_id}.mixins.json"
			mods {
				modServerRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			args "-mixin.config=${mod_id}.mixins.json"
			mods {
				modDataRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	compileOnly project(":Common")
	annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'

	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}")
	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}:api")

    implementation fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}")
    jarJar fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}") {
        jarJar.pin(it, "${spectrelib_version}")
    }

	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

	//runtimeOnly fg.deobf("curse.maven:charmofundying-316873:3927421")
	//runtimeOnly fg.deobf("curse.maven:architectury-419699:3984018")
	//runtimeOnly fg.deobf("curse.maven:biomemakeover-567709:3942516")
}

compileJava {
	source(project(":Common").sourceSets.main.allSource)
	options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation,-serial" << "-Werror"
}

sourcesJar {
	from project(":Common").sourceSets.main.allJava
}

tasks.withType(JavaCompile) {
	source(project(":Common").sourceSets.main.allSource)
}

def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }

	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': version, 'forge_mc_version_range': forge_mc_version_range, 'forge_version_range': forge_version_range,
				'license': license, 'mod_id': mod_id, 'mod_author': mod_author, 'mod_description': mod_description,
				'mod_name': mod_name, 'issue_tracker': issue_tracker, 'curios_version_range': curios_version_range,
                'mod_update_url': mod_update_url
	}
	it.from(project(":Common").sourceSets.main.resources) {
		include "pack.mcmeta"
		expand 'mod_name': mod_name
	}
	it.into "$buildDir/resources/main/"
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version
    }

    it.into '../files/'
}

processResources {
	from project(":Common").sourceSets.main.resources
	exclude('META-INF/mods.toml')
	exclude('pack.mcmeta')
	exclude '.cache'
	duplicatesStrategy(DuplicatesStrategy.FAIL)

	filesMatching('*.mixins.json') {
		expand "refmap_target": "${mod_id}."
	}
	configure {
        finalizedBy(replaceResources)
        finalizedBy(updates)
    }
}

jar {
	manifest {
		attributes([
			"Specification-Title": "${mod_name}",
			"Specification-Vendor": "wendall911",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": "${mod_name}",
			"Implementation-Version": "${archiveVersion.get()}",
			"Implementation-Vendor" :"wendall911"
		])
	}
	finalizedBy 'reobfJar'
}

reobf {
    jarJar {}
}

tasks.jarJar.configure {
    archiveClassifier.set("")
}

jarJar {
    enable()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId project.group
			artifactId project.archivesBaseName
			version project.version
			artifact jar
		}
	}
	repositories {
        if (project.hasProperty('localmaven')) {
            maven {
                url "file://" + localmaven
            }
        }
	}
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
	if (project.hasProperty('ccCurseApiKey')) {
        apiToken = project.ccCurseApiKey
        def mainFile = upload(project.ccCurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(project(":").projectDir.toString() + '/build/libs/changelog.txt')
        mainFile.addJavaVersion('Java 17')
        mainFile.addModLoader('Forge')
        mainFile.releaseType = "${cf_release}"
        "${cf_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addRequirement('curios')
        mainFile.addOptional('biome-makeover-forge')
    }
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${last_mod_version}";
}

tasks.build.dependsOn('changelog')
